import express from "express";
import {
  getUsers,
  postUsers,
  patchUser,
  deleteUser,
  getUsersByName,
  getUserById,
} from "../controllers/User-controller.js";
import {
  getPost,
  createPost,
  updatePost,
  deletePost,
  likePost,
} from "../controllers/post.js";

const router = express.Router();

/**
 * @swagger
 * components:
 *  schemas:
 *      User:
 *          type: object
 *          required:
 *              - firebaseId
 *              - fullName
 *              - userName
 *              - email
 *              - password
 *              - phoneNumber
 *          properties:
 *           firebaseId:
 *            type: string
 *            description: firebase id generated by firebase.
 *           fullName:
 *            type: string
 *            description: official name of the user
 *           userName: 
 *            type: string
 *            description: username for the userfeed
 *           email:
 *            type: string
 *           password: 
 *            type: string
 *            description: strong password
 *           phoneNumer:
 *            type: integer
 *            description: 10 digit number
 *           instaId: 
 *            type: string
 *           linkedIn: 
 *            type: string
 *            description: user linkedIn profile url    
 *          example:
 *           firebaseId: 7ds98f79sd87f98sd7
 *           fullName: Narendra Uchiha
 *           userName: Hinata
 *           email: gokuchauhan@yadav.com
 *           phoneNumer: 8765432130
 *           instaId: __puneetke_Deewane
 *           linkedIn: https://www.linkedin.com/in/sdlkjfsl;djfklsdj/
 *          
 *
 */

/**
 * @swagger
 * /users:
 *  get:
 *      summary: Returns the list of all users
 *      responses:
 *          '200':    
 *              description: list of all users
 *              content: 
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          items:
 *                              $ref: '#/components/schemas/User' 
 */


router.get("/users", getUsers);
/**
 * @swagger
 * /users/{firebaseId}:
 *  get:
 *      summary: Returns the user with given firebaseId
 *      parameters:
 *          - in: path
 *            name: firebaseId
 *            schema:
 *              type: string
 *            required: true
 *      responses:
 *          '200':    
 *              description: A single user
 *              content: 
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          items:
 *                              $ref: '#/components/schemas/User' 
 *          '404':
 *              description: user does not exist
 */
router.get("/users/:id", getUserById);

/**
 * @swagger
 * /users/search/{key}:
 *  get:
 *      summary: searches all users with this key in usernames
 *      parameters:
 *          - in: path
 *            name: key
 *            schema:
 *              type: string
 *            required: true
 *      responses:
 *          '200':    
 *              description: all users with "key" in usernames
 *              content: 
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          items:
 *                              $ref: '#/components/schemas/User' 
 *          '500':
 *              description: could not fetch data!
 */
router.get("/users/search/:key", getUsersByName);

/**
 * @swagger
 * /users:
 *  post:
 *      summary: creates a new user
 *      requestBody:
 *          required: true
 *          content: 
 *              application/json:
 *                  schema:
 *                      type: object
 *                      items: 
 *                          $ref: '#/components/schemas/User'
 *      responses:
 *          '201':    
 *              description: all users with "key" in usernames
 *              content: 
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          items:
 *                              $ref: '#/components/schemas/User' 
 *          '500':
 *              description: could not fetch data!
 */
router.post("/users", postUsers);


/**
 * @swagger
 * /users/{id}:
 *  patch:
 *      summary: update a user 
 *      parameters: 
 *          - in: path
 *            name: id
 *            type: string
 *            required: true
 *      requestBody:
 *          required: true
 *          content: 
 *              application/json:
 *                  schema:
 *                      type: object
 *                      items: 
 *                          $ref: '#/components/schemas/User'
 *      responses:
 *          '202':    
 *              description: all users with "key" in usernames
 *              content: 
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          items:
 *                              $ref: '#/components/schemas/User' 
 *          '500':
 *              description: could not fetch data!
 *          '404':
 *              description: user not found!
 */
router.patch("/users/:id", patchUser);


/**
 * @swagger
 * /users/{id}:
 *  delete:
 *      summary: update a user 
 *      parameters: 
 *          - in: path
 *            name: id
 *            type: string
 *            required: true
 *            description: string id of user to delete
 *      responses:
 *          '202':    
 *              description: user was deleted 
 *          '500':
 *              description: something went wrong!
 */
router.delete("/users/:id", deleteUser);

router.post("/posts", createPost);
router.get("/posts", getPost);
router.patch("/posts/:id", updatePost);
router.delete("posts/:id", deletePost);
router.patch("/posts/:id/like", likePost);

export default router;
